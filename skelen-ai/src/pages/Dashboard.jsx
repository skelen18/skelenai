// src/pages/Dashboard.jsx
import { useEffect, useState } from "react";
import { getAuth } from "firebase/auth";
import { collection, getDocs, deleteDoc, doc } from "firebase/firestore";
import { db } from "../firebase";
import Notification from "../components/Notification";
import Modal from "../components/Modal"; // Import Modal

function Dashboard() {
  const [chats, setChats] = useState([]);
  const [images, setImages] = useState([]);
  const [notification, setNotification] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [actionType, setActionType] = useState(""); // 'chat' nebo 'image'

  const auth = getAuth();
  const user = auth.currentUser;

  useEffect(() => {
    if (user) {
      const fetchChats = async () => {
        const chatCollection = collection(db, `users/${user.uid}/chats`);
        const chatSnapshot = await getDocs(chatCollection);
        const chatList = chatSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
        setChats(chatList);
      };

      const fetchImages = async () => {
        const imageCollection = collection(db, `users/${user.uid}/images`);
        const imageSnapshot = await getDocs(imageCollection);
        const imageList = imageSnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
        setImages(imageList);
      };

      fetchChats();
      fetchImages();
    }
  }, [user]);

  const handleDelete = (id, type) => {
    setSelectedItem(id);
    setActionType(type);
    setIsModalOpen(true);
  };

  const confirmDelete = async () => {
    if (actionType === "chat") {
      await deleteDoc(doc(db, `users/${user.uid}/chats`, selectedItem));
      setChats(chats.filter((chat) => chat.id !== selectedItem));
      setNotification({ message: "Chat deleted successfully", type: "success" });
    } else if (actionType === "image") {
      await deleteDoc(doc(db, `users/${user.uid}/images`, selectedItem));
      setImages(images.filter((image) => image.id !== selectedItem));
      setNotification({ message: "Image deleted successfully", type: "success" });
    }
    setIsModalOpen(false);
    setSelectedItem(null);
  };

  return (
    <div className="dashboard-container">
      <h1 className="text-3xl font-bold mb-4">Your Dashboard</h1>
      <div className="chat-history">
        <h2 className="text-2xl mb-2">Chat History</h2>
        {chats.map((chat) => (
          <div key={chat.id} className="chat-entry">
            <p><strong>User:</strong> {chat.userInput}</p>
            <p><strong>AI:</strong> {chat.aiMessage}</p>
            <button onClick={() => handleDelete(chat.id, "chat")} className="delete-button">Delete</button>
          </div>
        ))}
      </div>
      <div className="image-history">
        <h2 className="text-2xl mb-2">Generated Images</h2>
        {images.map((image) => (
          <div key={image.id} className="image-entry">
            <img src={image.imageUrl} alt="Generated by AI" className="generated-image" />
            <button onClick={() => handleDelete(image.id, "image")} className="delete-button">Delete</button>
          </div>
        ))}
      </div>
      {notification && (
        <Notification
          message={notification.message}
          type={notification.type}
          onClose={() => setNotification(null)}
        />
      )}
      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onConfirm={confirmDelete}
        message={`Are you sure you want to delete this ${actionType === "chat" ? "chat" : "image"}?`}
      />
    </div>
  );
}

export default Dashboard;
